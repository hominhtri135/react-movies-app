{"version":3,"file":"static/js/396.f49d35ce.chunk.js","mappings":"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","sources":["components/movie/MovieCard.js","components/loading/MovieDetailsLoading.js","pages/MovieDetailsPage.js"],"sourcesContent":["import Button from \"components/button/Button\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport { tmdbAPI } from \"apiConfig/config\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { withErrorBoundary } from \"react-error-boundary\";\r\n\r\nconst MovieCard = ({ item }) => {\r\n  const { title, vote_average, release_date, poster_path, id } = item;\r\n  const navigate = useNavigate();\r\n  return (\r\n    <div className=\"movie-card flex flex-col rounded-lg p-3 bg-slate-800 text-white h-full select-none\">\r\n      <img\r\n        src={\r\n          poster_path ? tmdbAPI.image500(poster_path) : tmdbAPI.imageDefault()\r\n        }\r\n        alt=\"\"\r\n        className=\"w-full h-[350px] object-cover rounded-lg mb-5\"\r\n      />\r\n      <div className=\"flex flex-col flex-1\">\r\n        <h3 className=\"text-xl font-bold mb-3\">{title}</h3>\r\n        <div className=\"flex items-center justify-between text-sm opacity-50 mb-5 \">\r\n          <span>{new Date(release_date).getFullYear()}</span>\r\n          <span>{vote_average}</span>\r\n        </div>\r\n        <Button onClick={() => navigate(`/movie/${id}`)}>Watch now</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nMovieCard.propsTypes = {\r\n  item: PropTypes.shape({\r\n    title: PropTypes.string,\r\n    vote_average: PropTypes.number,\r\n    release_date: PropTypes.string,\r\n    poster_path: PropTypes.string,\r\n    id: PropTypes.number,\r\n  }),\r\n};\r\n\r\nfunction FallbackComponent() {\r\n  return (\r\n    <p className=\"bg-red-50 text-red-400\">\r\n      Something went wrong with this component\r\n    </p>\r\n  );\r\n}\r\n\r\nexport default withErrorBoundary(MovieCard, { FallbackComponent });\r\n","import React from \"react\";\r\nimport Skeleton, { SkeletonTheme } from \"react-loading-skeleton\";\r\n\r\nconst MovieDetailsLoading = () => {\r\n  return (\r\n    <SkeletonTheme baseColor=\"#878b94\" highlightColor=\"#b7b9bf\">\r\n      <div className=\"w-full h-[600px] relative\">\r\n        <div className=\"absolute inset-0 bg-black bg-opacity-70\"></div>\r\n        <SkeletonTheme baseColor=\"#9fa2a9\" highlightColor=\"#b7b9bf\">\r\n          <Skeleton className=\"w-full h-full\"></Skeleton>\r\n        </SkeletonTheme>\r\n      </div>\r\n      <div className=\"w-full h-[400px] max-w-[800px] mx-auto -mt-[200px] relative z-10 pb-10\">\r\n        <Skeleton className=\"w-full h-full object-cover rounded-xl\"></Skeleton>\r\n      </div>\r\n      <h1 className=\"text-center text-4xl font-bold text-white mb-10\">\r\n        <Skeleton height={40} className=\"max-w-lg\"></Skeleton>\r\n      </h1>\r\n      <div className=\"flex items-center justify-center gap-x-5 mb-10\">\r\n        {new Array(3).fill(0).map((item, index) => (\r\n          <Skeleton\r\n            width={150}\r\n            height={42}\r\n            key={index}\r\n            className=\"py-2 px-4 rounded\"\r\n          ></Skeleton>\r\n        ))}\r\n      </div>\r\n\r\n      <p className=\"text-center leading-relaxed max-w-[600px] mx-auto mb-10\">\r\n        <Skeleton count={5}></Skeleton>\r\n      </p>\r\n    </SkeletonTheme>\r\n  );\r\n};\r\n\r\nexport default MovieDetailsLoading;\r\n","import { Swiper, SwiperSlide } from \"swiper/react\";\r\nimport { fetcher, tmdbAPI } from \"apiConfig/config\";\r\n\r\nimport { Helmet } from \"react-helmet\";\r\nimport MovieCard from \"components/movie/MovieCard\";\r\nimport MovieDetailsLoading from \"components/loading/MovieDetailsLoading\";\r\nimport React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport useSWR from \"swr\";\r\n\r\nconst MovieDetailsPage = () => {\r\n  const { movieId } = useParams();\r\n  const { data, isLoading } = useSWR(\r\n    tmdbAPI.getMovieDetails(movieId),\r\n    fetcher,\r\n    {\r\n      revalidateIfStale: false,\r\n      revalidateOnFocus: false,\r\n      revalidateOnReconnect: false,\r\n    }\r\n  );\r\n\r\n  const { backdrop_path, poster_path, title, genres, overview } =\r\n    data === undefined\r\n      ? {\r\n          backdrop_path: \"\",\r\n          poster_path: \"\",\r\n          title: \"\",\r\n          genres: \"\",\r\n          overview: \"\",\r\n        }\r\n      : data;\r\n\r\n  function createMetaTagFacebook(type, title, description, image) {\r\n    const metaTagFaceBook = [];\r\n    if (type) metaTagFaceBook.push({ property: \"og:type\", content: type });\r\n    if (title) metaTagFaceBook.push({ property: \"og:title\", content: title });\r\n    if (description)\r\n      metaTagFaceBook.push({\r\n        property: \"og:description\",\r\n        content: description,\r\n      });\r\n    if (image) metaTagFaceBook.push({ property: \"og:image\", content: image });\r\n    return metaTagFaceBook;\r\n  }\r\n\r\n  return (\r\n    <div className=\"py-10 px-5\">\r\n      {isLoading && !data && <MovieDetailsLoading></MovieDetailsLoading>}\r\n\r\n      {!isLoading && data && (\r\n        <Helmet\r\n          onChangeClientState={(newState, addedTags, removedTags) => {}}\r\n          defaultTitle=\"My Site\"\r\n          titleTemplate=\"MRA | %s\"\r\n        >\r\n          <title>{title}</title>\r\n          <meta name=\"description\" content=\"Home component\" />\r\n          {createMetaTagFacebook(\r\n            \"article\",\r\n            title,\r\n            overview,\r\n            tmdbAPI.imageOriginal(poster_path)\r\n          ).map((item, index) => {\r\n            return (\r\n              <meta\r\n                property={item.property}\r\n                content={`${item.content}`}\r\n                key={index}\r\n              />\r\n            );\r\n          })}\r\n        </Helmet>\r\n      )}\r\n\r\n      {!isLoading && data && (\r\n        <>\r\n          <div className=\"w-full h-[600px] relative\">\r\n            <div className=\"absolute inset-0 bg-black bg-opacity-70\"></div>\r\n            <div\r\n              className=\"w-full h-full bg-cover\"\r\n              style={{\r\n                backgroundImage: `url(${\r\n                  backdrop_path\r\n                    ? tmdbAPI.imageOriginal(backdrop_path)\r\n                    : tmdbAPI.imageDefault()\r\n                })`,\r\n              }}\r\n            ></div>\r\n          </div>\r\n          <div className=\"w-full h-[400px] max-w-[800px] mx-auto -mt-[200px] relative z-10 pb-10\">\r\n            <img\r\n              src={\r\n                poster_path\r\n                  ? tmdbAPI.imageOriginal(poster_path)\r\n                  : tmdbAPI.imageDefault()\r\n              }\r\n              alt=\"\"\r\n              className=\"w-full h-full object-cover rounded-xl\"\r\n            />\r\n          </div>\r\n          <h1 className=\"text-center text-4xl font-bold text-white mb-10\">\r\n            {title}\r\n          </h1>\r\n\r\n          {genres.length > 0 && (\r\n            <div className=\"flex items-center justify-center gap-x-5 mb-10\">\r\n              {genres.map((item) => (\r\n                <span\r\n                  className=\"py-2 px-4 border-primary text-primary border rounded\"\r\n                  key={item.id}\r\n                >\r\n                  {item.name}\r\n                </span>\r\n              ))}\r\n            </div>\r\n          )}\r\n\r\n          <p className=\"text-center leading-relaxed max-w-[600px] mx-auto mb-10\">\r\n            {overview}\r\n          </p>\r\n\r\n          <MovieMeta type=\"credits\"></MovieMeta>\r\n          <MovieMeta type=\"videos\"></MovieMeta>\r\n          <MovieMeta type=\"similar\"></MovieMeta>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction MovieMeta({ type = \"videos\" }) {\r\n  const { movieId } = useParams();\r\n  const { data } = useSWR(tmdbAPI.getMovieMeta(movieId, type), fetcher, {\r\n    revalidateIfStale: false,\r\n    revalidateOnFocus: false,\r\n    revalidateOnReconnect: false,\r\n  });\r\n\r\n  if (!data) return null;\r\n\r\n  if (type === \"credits\") {\r\n    const { cast } = data;\r\n    if (!cast || cast.length <= 0) return null;\r\n\r\n    return (\r\n      <div className=\"py-10\">\r\n        <h2 className=\"text-center text-3xl mb-10 font-bold\">Casts</h2>\r\n        <div className=\"grid grid-cols-4 gap-5\">\r\n          {cast.slice(0, 4).map((item) => (\r\n            <div className=\"cast-item\" key={item.id}>\r\n              <img\r\n                src={\r\n                  item.profile_path\r\n                    ? tmdbAPI.imageOriginal(item.profile_path)\r\n                    : tmdbAPI.imageDefault()\r\n                }\r\n                alt=\"\"\r\n                className=\"w-full h-[350px] object-cover rounded-lg mb-3\"\r\n              />\r\n              <h3 className=\"text-xl font-medium text-center\">{item.name}</h3>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    const { results } = data;\r\n    if (!results || results.length <= 0) return null;\r\n\r\n    if (type === \"videos\")\r\n      return (\r\n        <div className=\"py-10\">\r\n          <div className=\"flex flex-col gap-10\">\r\n            {results.slice(0).map((item) => (\r\n              <div key={item.id}>\r\n                <h3 className=\"mb-5 text-xl font-medium p-3 bg-secondary inline-block\">\r\n                  {item.name}\r\n                </h3>\r\n                <div className=\"w-full aspect-video\">\r\n                  <iframe\r\n                    width=\"864\"\r\n                    height=\"486\"\r\n                    src={`https://www.youtube.com/embed/${item.key}`}\r\n                    title=\"YouTube video player\"\r\n                    frameBorder=\"0\"\r\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\r\n                    allowFullScreen\r\n                    className=\"w-full h-full object-fill\"\r\n                  ></iframe>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n    if (type === \"similar\")\r\n      return (\r\n        <div className=\"py-10\">\r\n          <h2 className=\"text-3xl font-medium mb-10\">Similar Movies</h2>\r\n          <div className=\"movie-list\">\r\n            <Swiper\r\n              grabCursor={\"true\"}\r\n              spaceBetween={40}\r\n              slidesPerView={\"auto\"}\r\n            >\r\n              {results.length > 0 &&\r\n                results.map((movie) => (\r\n                  <SwiperSlide key={movie.id}>\r\n                    <MovieCard item={movie}></MovieCard>\r\n                  </SwiperSlide>\r\n                ))}\r\n            </Swiper>\r\n          </div>\r\n        </div>\r\n      );\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default MovieDetailsPage;\r\n"],"names":["MovieCard","_ref","item","title","vote_average","release_date","poster_path","id","navigate","useNavigate","_jsxs","className","children","_jsx","src","tmdbAPI","image500","imageDefault","alt","Date","getFullYear","Button","onClick","concat","propsTypes","PropTypes","withErrorBoundary","FallbackComponent","SkeletonTheme","baseColor","highlightColor","Skeleton","height","Array","fill","map","index","width","count","MovieMeta","_ref2","_ref2$type","type","movieId","useParams","data","useSWR","getMovieMeta","fetcher","revalidateIfStale","revalidateOnFocus","revalidateOnReconnect","cast","length","slice","profile_path","imageOriginal","name","results","key","frameBorder","allow","allowFullScreen","Swiper","grabCursor","spaceBetween","slidesPerView","movie","SwiperSlide","_useSWR","getMovieDetails","isLoading","undefined","backdrop_path","genres","overview","MovieDetailsLoading","Helmet","onChangeClientState","newState","addedTags","removedTags","defaultTitle","titleTemplate","content","description","image","metaTagFaceBook","push","property","createMetaTagFacebook","_Fragment","style","backgroundImage"],"sourceRoot":""}